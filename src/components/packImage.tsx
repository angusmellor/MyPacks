const calcCatHeight = (catWeights: number[], height: number) => {

  const totalWeight = catWeights.reduce((result, currentValue) => result + currentValue, 0);
  
  let catPositions = catWeights.reduce((result, currentValue) => {
    const previousTotal = result[result.length - 1] ; 
    const currentTotal = previousTotal + currentValue;
    result.push(currentTotal)
    return result
  }, [0]);

  catPositions= catPositions.map((catHeight: number) => (catHeight / totalWeight) * height);
  
  const catHeights = catWeights.map((weight: number) => {
    return (weight / totalWeight) * height;
  });

  return [catHeights, catPositions];
};

export default function PackImage({ catWeights, height }: { catWeights: number[], height: number }) {
  
  const colourPalette = [ 'custBlue', 'custBlue2', 'custGreen', 'custPink', 'custPurp', 'custBrown', 'custOrng']
  const [catHeights, catPositions] = calcCatHeight(catWeights, height);
  const width = height / 1.6;

  return (
    <>
      <div className="flex flex-col items-center justify-center">
        <div className="flex">
          <svg xmlns="http://www.w3.org/2000/svg" width={width} height={height}>
            <defs>
              <clipPath id="packoutline">
              <path id="packoutlinePath" fill="none" d="M114.127 3.712c-15.43.181-31.056 1.348-45.83 6.09-9.17 2.955-18.089 7.428-24.908 14.36-4.914 4.926-8.306 11.222-10.206 17.886-2.936 10.086-2.913 20.705-2.69 31.117.284 14.02.555 28.046.223 42.068-.684 36.936.694 73.87 2.565 110.753.332 6.642.685 13.283 1.048 19.923-6.747 3.16-13.286 6.844-19.215 11.372-4.53 3.496-8.474 7.955-10.567 13.341-2.832 7.09-3.063 14.861-2.997 22.397.182 14.426 2.326 28.837 6.417 42.674 3.824 12.839 9.73 25.251 18.584 35.403 6.296 7.249 14.056 13.32 22.89 17.159l5.853 2.247c11.76 3.895 24.21 4.818 36.49 5.633 10.608.681 21.235 1.005 31.862 1.102 23.272.496 46.614-1.006 69.564-4.94 4.623-.797 9.285-2.195 13.024-5.136 4.4-3.378 7.773-7.863 10.996-12.326 4.703-6.763 8.858-13.893 12.793-21.124 8.073-15.01 14.523-31.116 17.027-48.053.852-5.967 1.423-11.972 1.854-17.982.41-6.687.068-13.661-2.83-19.815-3.085-6.637-8.289-11.994-13.751-16.739a81.183 81.183 0 0 0-9.78-7.19c.458-.823-.432-.789-.808-1.111a3234.995 3234.995 0 0 1 4.05-106.986c1.392-25.998 3.352-52.221.093-78.177-1.156-9.048-2.715-18.27-7.01-26.428-3.752-7.163-9.867-13.343-17.568-16.116-4.43-1.45-8.973-2.526-13.5-3.619-19.01-4.414-38.468-6.727-57.951-7.545a314.85 314.85 0 0 0-15.722-.238Z"/>
              </clipPath>
              {catHeights.map((catHeight: number, index: number) => {
                return (
                  <clipPath key={index} id={`category${index}`}>
                    <rect  id={`categoryShape${index}`} x="0" y={catPositions[index]} width={width} height={catHeight}/>
                  </clipPath>
                );
               })}
              {catHeights.map((_, index: number) => {
                return (
                  <clipPath key={index} id={`intersection${index}`} clipPath="url(#packoutline)">
                    <use x="0" y="0" width={width} height={height} xlinkHref={`#categoryShape${index}`}/>
                  </clipPath>
                );
              })}
            </defs>
            {catHeights.map((_, index: number) => {
              return (
                <rect key={`category${index}`} x={0} y={0} width={width} height={height} className={`fill-${colourPalette[index]}`} clipPath={`url(#intersection${index})`}/>
              )
            })}
            <path fill="none" d="M123.96 180.696a585.731 585.731 0 0 0 79.199-19.49 585.698 585.698 0 0 0 70.362-27.749M130.98 352.472a310.786 310.786 0 0 0 45.917 5.946c13.313.722 26.67.586 39.97-.33a341.427 341.427 0 0 0 44.101-5.946m7.034-110.819a882.13 882.13 0 0 0 5.519-103.902c-.166-27.74-1.643-55.497-5.286-82.998a529.916 529.916 0 0 0-7.184-41.498M124.304 241.487l-.207-69.572c-.025-8.397.069-16.794 0-25.19-.221-27.087-2.948-54.315.573-81.173a176.088 176.088 0 0 1 17.282-56.183m149.034 234.507a44.72 44.72 0 0 0-12.41-2.386 44.702 44.702 0 0 0-10.732.783 436.648 436.648 0 0 0-2.208 15.808c-2.44 20.147-3.472 40.444-3.83 60.736-.172 9.782-.188 19.57-.618 29.345-.344 7.816-.946 15.733.635 23.396a41.9 41.9 0 0 0 7.85 17.086M106 246.125c-.346-6.291-.68-12.583-1-18.875-1.504-29.487-2.735-58.996-2.852-88.521-.038-9.41.038-18.82.227-28.229.275-13.716-.068-27.432-.325-41.149-.128-6.858-.072-13.749.944-20.533 1.016-6.784 3.047-13.51 6.793-19.257 6.46-9.915 17.454-16.04 28.713-19.686 13.187-4.27 27.144-5.637 41-6 12.426-.325 24.87.137 37.25 1.25 17.254 1.551 34.42 4.373 51.11 9.016 1.092.304 2.183.615 3.25 1 6.653 2.396 12.085 7.57 15.665 13.667 4.162 7.087 5.96 15.3 7.156 23.432 3.848 26.165 2.064 52.786.6 79.192a3245.014 3245.014 0 0 0-4.275 112.391 79.757 79.757 0 0 1 15.5 11.926c4.256 4.2 8.104 8.997 10.119 14.626 2.568 7.172 1.964 15.041 1.25 22.625-.429 4.555-.886 9.11-1.625 13.625-3.337 20.382-12.34 39.436-23 57.125-3.266 5.42-6.708 10.756-10.75 15.625-2.639 3.178-5.595 6.2-9.25 8.125-3.54 1.865-7.55 2.605-11.5 3.25-15.995 2.614-32.174 4.068-48.375 4.5-6.873.183-13.752.183-20.625 0m2.1.023a540.09 540.09 0 0 1-37.122-1.415c-13.797-1.001-27.914-2.636-40.23-8.935-11.046-5.65-20.06-14.84-26.585-25.393-6.525-10.553-10.665-22.443-13.366-34.553-2.634-11.81-3.941-23.92-3.797-36.018.092-7.705.877-15.736 4.943-22.282 3.044-4.9 7.699-8.577 12.522-11.74 4.959-3.251 10.197-6.07 15.601-8.51 4.33-1.955 8.825-3.683 13.54-4.268a29.11 29.11 0 0 1 4.709-.2l6.937 112.767c.388 6.31-.019 12.724-2.081 18.7a50.458 50.458 0 0 1-6.502 12.67l-1.153 2.027"
              transform="translate(-70.076 .934)"
              stroke="#000"
              stroke-width="2.75"
            />
            <path d="M97.241 6.88c6.236 9.606 12.16 18.901 18.24 28.351 6.08 9.45 4.389 6.996 4.389 6.996l.516 51.634 9.063.064-.495-49.551.826-3.634 26.592-32.869-8.258-1.486-19.656 26.262-6.937-.165L106.656 6.22Z" 
              transform="translate(0 -1)"
            />
          </svg>
        </div>
      </div>
    </>
  )
}